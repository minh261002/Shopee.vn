generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  USER
  SELLER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING
}

model User {
  id               String                  @id @default(uuid())
  name             String                  @db.Text
  email            String
  emailVerified    Boolean
  image            String?                 @db.Text
  role             Role                    @default(USER)
  createdAt        DateTime
  updatedAt        DateTime
  sessions         Session[]
  accounts         Account[]
  addresses        UserAddress[]
  stores           Store[]
  orders           Order[]
  carts            Cart[]
  wishlists        Wishlist[]
  productReviews   ProductReview[]
  storeReviews     StoreReview[]
  storeFollowers   StoreFollower[]
  notifications    Notification[]
  couponUsages     CouponUsage[]
  returnRequests   ReturnRequest[]
  loyaltyAccount   LoyaltyAccount?
  supportTickets   SupportTicket[]
  liveStreams      LiveStream[]
  streamViews      StreamView[]
  streamChats      StreamChat[]
  affiliate        Affiliate?
  searchQueries    SearchQuery[]
  recommendations  ProductRecommendation[]
  behaviors        UserBehavior[]
  productShares    ProductShare[]
  following        UserFollow[]            @relation("UserFollowing")
  followers        UserFollow[]            @relation("UserFollowers")
  subscriptions    Subscription[]
  productAuditLogs ProductAuditLog[]

  @@unique([email])
  @@map("users")
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?  @db.Text
  userAgent String?  @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@index([userId])
  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String    @db.Text
  providerId            String    @db.Text
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime
  updatedAt             DateTime

  @@index([userId])
  @@map("account")
}

model Verification {
  id         String    @id @default(uuid())
  identifier String    @db.Text
  value      String    @db.Text
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model UserAddress {
  id        String      @id @default(uuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  address   String      @db.Text
  type      AddressType @default(HOME)
  lat       Float?
  lng       Float?
  isDefault Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([userId])
  @@map("user_addresses")
}

enum AddressType {
  HOME
  WORK
  OTHER
}

model Category {
  id       String  @id @default(uuid())
  name     String
  slug     String  @unique
  image    String  @db.Text
  featured Boolean @default(false)

  parentId        String?
  parent          Category?       @relation("CategoryToSubcategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children        Category[]      @relation("CategoryToSubcategories")
  storeCategories StoreCategory[]
  products        Product[]
  behaviors       UserBehavior[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([parentId])
  @@map("categories")
}

// Banner, Slider, Carousel Management - Shopee Style
enum ContentType {
  HERO_BANNER // Banner chính trang chủ
  FLASH_SALE_BANNER // Banner flash sale
  CATEGORY_BANNER // Banner danh mục
  BRAND_BANNER // Banner thương hiệu
  PRODUCT_BANNER // Banner sản phẩm
  PROMOTION_BANNER // Banner khuyến mãi
  SEASONAL_BANNER // Banner theo mùa
  SIDEBAR_BANNER // Banner sidebar
  CHECKOUT_BANNER // Banner trang thanh toán
  CART_BANNER // Banner giỏ hàng
  SEARCH_BANNER // Banner trang tìm kiếm
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
  ARCHIVED
  PAUSED
  EXPIRED
}

enum ContentPosition {
  HOMEPAGE_HERO
  HOMEPAGE_FEATURED
  HOMEPAGE_SIDEBAR
  CATEGORY_HEADER
  CATEGORY_SIDEBAR
  PRODUCT_DETAIL_TOP
  PRODUCT_DETAIL_SIDEBAR
  CHECKOUT_PAGE
  CART_PAGE
  SEARCH_RESULTS
  FLASH_SALE_PAGE
  BRAND_PAGE
}

enum TargetAudience {
  ALL_USERS
  NEW_USERS
  RETURNING_USERS
  PREMIUM_USERS
  MOBILE_USERS
  DESKTOP_USERS
  SPECIFIC_LOCATION
  SPECIFIC_DEVICE
}

enum GeographicTarget {
  ALL_VIETNAM
  NORTH_VIETNAM
  CENTRAL_VIETNAM
  SOUTH_VIETNAM
  HANOI
  HO_CHI_MINH
  DA_NANG
  SPECIFIC_CITY
}

enum CampaignType {
  FLASH_SALE
  SEASONAL
  BRAND
}

model ContentBlock {
  id          String          @id @default(uuid())
  title       String
  description String?         @db.Text
  type        ContentType
  status      ContentStatus   @default(DRAFT)
  position    ContentPosition
  priority    Int             @default(0)

  // Display settings
  startDate DateTime?
  endDate   DateTime?
  isActive  Boolean   @default(true)

  // Targeting
  targetAudience   TargetAudience   @default(ALL_USERS)
  geographicTarget GeographicTarget @default(ALL_VIETNAM)
  targetLocations  String?          @db.Text // JSON array of specific locations
  targetDevices    String?          @db.Text // JSON array of devices
  targetCategories String?          @db.Text // JSON array of category IDs
  targetUserGroups String?          @db.Text // JSON array of user groups

  // A/B Testing
  abTestGroup  String? // A, B, C, etc.
  abTestWeight Int     @default(50) // Percentage for this variant
  abTestName   String? // Name of the A/B test

  // Styling
  backgroundColor String?
  textColor       String?
  customCSS       String? @db.Text

  // Responsive settings
  showOnMobile  Boolean @default(true)
  showOnTablet  Boolean @default(true)
  showOnDesktop Boolean @default(true)

  // Performance tracking
  clickTracking      Boolean @default(true)
  impressionTracking Boolean @default(true)
  conversionTracking Boolean @default(true)

  // Shopee specific
  isFlashSale      Boolean   @default(false)
  flashSaleEndTime DateTime?
  discountPercent  Int? // Percentage discount
  originalPrice    Float? // Original price
  salePrice        Float? // Sale price

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  items         ContentItem[]
  campaignId    String?
  campaign      Campaign?          @relation(fields: [campaignId], references: [id], onDelete: SetNull)
  analytics     ContentAnalytics[]
  abTestResults ABTestResult[]
  createdBy     String?
  updatedBy     String?

  @@index([type, status])
  @@index([position, isActive])
  @@index([startDate, endDate])
  @@index([campaignId])
  @@index([targetAudience])
  @@index([geographicTarget])
  @@index([isFlashSale])
  @@map("content_blocks")
}

model ContentItem {
  id             String       @id @default(uuid())
  contentBlockId String
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

  // Content details
  title       String?
  subtitle    String?
  description String? @db.Text
  image       String  @db.Text
  imageAlt    String?

  // Link settings
  linkUrl      String?
  linkText     String?
  openInNewTab Boolean @default(false)

  // Shopee specific
  productId  String? // Link to specific product
  categoryId String? // Link to specific category
  brandId    String? // Link to specific brand

  // Display order
  order Int @default(0)

  // Additional data (JSON)
  metadata String? @db.Text // JSON string for additional data

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([contentBlockId, order])
  @@index([productId])
  @@index([categoryId])
  @@index([brandId])
  @@map("content_items")
}

// Campaign Management - Shopee Style
model Campaign {
  id          String        @id @default(uuid())
  name        String
  description String?       @db.Text
  status      ContentStatus @default(DRAFT)

  // Campaign period
  startDate DateTime?
  endDate   DateTime?

  // Budget and goals
  budget            Float?
  targetImpressions Int?
  targetClicks      Int?
  targetConversions Int?
  targetRevenue     Float?

  // Target settings
  targetAudience   TargetAudience   @default(ALL_USERS)
  geographicTarget GeographicTarget @default(ALL_VIETNAM)
  targetLocations  String?          @db.Text // JSON string for audience targeting
  targetDevices    String?          @db.Text // JSON string for device targeting
  targetCategories String?          @db.Text // JSON string for category targeting
  conditions       String?          @db.Text // JSON string for display conditions

  // Shopee specific
  campaignType CampaignType?
  isFeatured   Boolean       @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  contentBlocks ContentBlock[]

  @@index([status, startDate, endDate])
  @@index([targetAudience])
  @@index([geographicTarget])
  @@index([campaignType])
  @@map("campaigns")
}

// Analytics for content performance - Shopee Style
model ContentAnalytics {
  id             String       @id @default(uuid())
  contentBlockId String
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

  // Metrics
  impressions Int   @default(0)
  clicks      Int   @default(0)
  conversions Int   @default(0)
  revenue     Float @default(0)

  // Device breakdown
  mobileImpressions  Int @default(0)
  tabletImpressions  Int @default(0)
  desktopImpressions Int @default(0)

  // Geographic breakdown
  northImpressions   Int @default(0)
  centralImpressions Int @default(0)
  southImpressions   Int @default(0)

  // Time breakdown
  hourOfDay Int? // 0-23
  dayOfWeek Int? // 0-6 (Sunday = 0)

  // Date tracking
  date DateTime @default(now())

  @@unique([contentBlockId, date])
  @@index([date])
  @@index([hourOfDay])
  @@index([dayOfWeek])
  @@map("content_analytics")
}

// A/B Test Results - Shopee Style
model ABTestResult {
  id             String       @id @default(uuid())
  contentBlockId String
  contentBlock   ContentBlock @relation(fields: [contentBlockId], references: [id], onDelete: Cascade)

  testGroup   String // A, B, C, etc.
  testName    String? // Name of the test
  impressions Int     @default(0)
  clicks      Int     @default(0)
  conversions Int     @default(0)
  revenue     Float   @default(0)

  // Conversion rate
  clickRate      Float @default(0)
  conversionRate Float @default(0)

  date DateTime @default(now())

  @@unique([contentBlockId, testGroup, date])
  @@index([date])
  @@index([testName])
  @@map("ab_test_results")
}

// Store Management System
enum StoreStatus {
  PENDING_APPROVAL
  ACTIVE
  SUSPENDED
  CLOSED
}

enum StoreType {
  INDIVIDUAL // Cá nhân
  BUSINESS // Doanh nghiệp
  CORPORATION // Công ty
  OFFICIAL // Cửa hàng chính thức
}

model Store {
  id          String      @id @default(uuid())
  name        String
  slug        String      @unique
  description String?     @db.Text
  status      StoreStatus @default(PENDING_APPROVAL)
  type        StoreType   @default(INDIVIDUAL)

  // Store owner
  ownerId String
  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // Store information
  logo    String? @db.Text
  banner  String? @db.Text
  phone   String?
  email   String?
  website String? @db.Text

  // Business information
  businessLicense String? @db.Text // Giấy phép kinh doanh
  taxCode         String? // Mã số thuế
  businessName    String? // Tên doanh nghiệp
  businessAddress String? @db.Text

  // Location
  address String @db.Text
  lat     Float?
  lng     Float?

  // Statistics
  totalProducts Int   @default(0)
  totalOrders   Int   @default(0)
  totalRevenue  Float @default(0)
  rating        Float @default(0)
  reviewCount   Int   @default(0)
  followerCount Int   @default(0)

  // Store policies
  returnPolicy   String? @db.Text
  shippingPolicy String? @db.Text
  warrantyPolicy String? @db.Text

  // Operating status
  isFeatured Boolean @default(false)
  isVerified Boolean @default(false)

  // Social media
  facebookUrl  String? @db.Text
  instagramUrl String? @db.Text
  youtubeUrl   String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products           Product[]
  orders             Order[]
  storeCategories    StoreCategory[]
  storeReviews       StoreReview[]
  storeFollowers     StoreFollower[]
  storeAnalytics     StoreAnalytics[]
  storePromotions    StorePromotion[]
  storeDocuments     StoreDocument[]
  liveStreams        LiveStream[]
  affiliateLinks     AffiliateLink[]
  inventoryLocations InventoryLocation[]
  behaviors          UserBehavior[]

  @@index([ownerId])
  @@index([status])
  @@index([type])
  @@index([rating])
  @@index([isFeatured])
  @@index([isVerified])
  @@map("stores")
}

// Store categories (different from general categories)
model StoreCategory {
  id         String   @id @default(uuid())
  storeId    String
  store      Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  isMain   Boolean @default(false) // Danh mục chính của cửa hàng
  priority Int     @default(0)

  createdAt DateTime @default(now())

  @@unique([storeId, categoryId])
  @@index([storeId])
  @@index([categoryId])
  @@map("store_categories")
}

// Store documents for verification
enum DocumentType {
  BUSINESS_LICENSE
  TAX_CERTIFICATE
  ID_CARD
  PASSPORT
  BANK_STATEMENT
  OTHER
}

model StoreDocument {
  id      String @id @default(uuid())
  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  type     DocumentType
  title    String
  fileUrl  String       @db.Text
  fileName String
  fileSize Int?
  mimeType String?

  status     String    @default("PENDING") // PENDING, APPROVED, REJECTED
  reviewNote String?   @db.Text
  reviewedBy String? // Admin ID
  reviewedAt DateTime?

  expiryDate DateTime? // For documents with expiry

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([type])
  @@index([status])
  @@map("store_documents")
}

// Product Management
enum ProductStatus {
  DRAFT
  PENDING_APPROVAL
  ACTIVE
  INACTIVE
  OUT_OF_STOCK
  DISCONTINUED
  REJECTED
}

enum ProductCondition {
  NEW
  LIKE_NEW
  GOOD
  FAIR
  REFURBISHED
}

model Product {
  id               String           @id @default(uuid())
  name             String
  slug             String           @unique
  description      String?          @db.Text
  shortDescription String?          @db.Text
  status           ProductStatus    @default(DRAFT)
  condition        ProductCondition @default(NEW)

  // Store relation
  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  // Category relation
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  // Brand information
  brandId String?
  brand   Brand?  @relation(fields: [brandId], references: [id])

  // Pricing
  originalPrice   Float
  salePrice       Float?
  costPrice       Float? // Giá vốn
  discountPercent Int?

  // Inventory
  stock             Int     @default(0)
  lowStockThreshold Int     @default(5)
  sku               String? @unique
  barcode           String?

  // Physical properties
  weight Float? // kg
  length Float? // cm
  width  Float? // cm
  height Float? // cm

  // SEO
  metaTitle       String?
  metaDescription String? @db.Text
  metaKeywords    String? @db.Text

  // Product features
  features       String? @db.Text // JSON
  specifications String? @db.Text // JSON
  tags           String? @db.Text // JSON array

  // Statistics
  viewCount     Int   @default(0)
  purchaseCount Int   @default(0)
  rating        Float @default(0)
  reviewCount   Int   @default(0)
  wishlistCount Int   @default(0)

  // Flags
  isFeatured       Boolean @default(false)
  isDigital        Boolean @default(false)
  requiresShipping Boolean @default(true)

  // Soft delete
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
  deletedBy String?

  // Audit fields
  createdBy      String?
  updatedBy      String?
  lastModifiedBy String?

  // Dates
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  images                ProductImage[]
  variants              ProductVariant[]
  reviews               ProductReview[]
  orderItems            OrderItem[]
  cartItems             CartItem[]
  wishlists             Wishlist[]
  productAnalytics      ProductAnalytics[]
  flashSaleItems        FlashSaleItem[]
  affiliateLinks        AffiliateLink[]
  inventoryItems        InventoryItem[]
  stockMovements        StockMovement[]
  sourceRecommendations ProductRecommendation[] @relation("SourceProduct")
  targetRecommendations ProductRecommendation[] @relation("TargetProduct")
  behaviors             UserBehavior[]
  shares                ProductShare[]
  auditLogs             ProductAuditLog[]

  @@index([storeId])
  @@index([categoryId])
  @@index([brandId])
  @@index([status])
  @@index([isDeleted])
  @@index([isFeatured])
  @@index([createdAt])
  @@index([updatedAt])
  @@map("products")
}

// Brand Management
model Brand {
  id          String  @id @default(uuid())
  name        String  @unique
  slug        String  @unique
  description String? @db.Text
  logo        String? @db.Text
  website     String? @db.Text

  isActive   Boolean @default(true)
  isFeatured Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  products Product[]

  @@index([isActive])
  @@index([isFeatured])
  @@map("brands")
}

// Product Images
model ProductImage {
  id        String  @id @default(uuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  url     String  @db.Text
  alt     String?
  caption String?
  order   Int     @default(0)
  isMain  Boolean @default(false)

  createdAt DateTime @default(now())

  @@index([productId, order])
  @@map("product_images")
}

// Product Variants (size, color, etc.)
model ProductVariant {
  id        String  @id @default(uuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  name  String // e.g., "Red - Large"
  sku   String? @unique
  price Float? // Override product price
  stock Int     @default(0)

  // Variant attributes (JSON)
  attributes String @db.Text // {"color": "red", "size": "L"}

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orderItems     OrderItem[]
  cartItems      CartItem[]
  inventoryItems InventoryItem[]
  stockMovements StockMovement[]

  @@index([productId])
  @@index([isActive])
  @@map("product_variants")
}

// Order Management
enum OrderStatus {
  PENDING_PAYMENT
  PAID
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
  RETURNED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethod {
  COD // Cash on Delivery
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  E_WALLET
  INSTALLMENT
}

model Order {
  id            String         @id @default(uuid())
  orderNumber   String         @unique
  status        OrderStatus    @default(PENDING_PAYMENT)
  paymentStatus PaymentStatus  @default(PENDING)
  paymentMethod PaymentMethod?

  // Customer information
  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  // Store information
  storeId String
  store   Store  @relation(fields: [storeId], references: [id])

  // Guest checkout info (if no user)
  guestEmail String?
  guestPhone String?
  guestName  String?

  // Pricing
  subtotal    Float // Tổng tiền hàng
  shippingFee Float @default(0)
  tax         Float @default(0)
  discount    Float @default(0)
  total       Float // Tổng thanh toán

  // Shipping information
  shippingAddress  String  @db.Text
  shippingWard     String?
  shippingDistrict String?
  shippingCity     String?
  shippingCountry  String  @default("Vietnam")
  shippingPhone    String?
  shippingName     String?
  shippingLat      Float? // Google Maps latitude
  shippingLng      Float? // Google Maps longitude

  // Billing information (if different from shipping)
  billingAddress  String? @db.Text
  billingWard     String?
  billingDistrict String?
  billingCity     String?
  billingCountry  String?
  billingPhone    String?
  billingName     String?
  billingLat      Float? // Google Maps latitude
  billingLng      Float? // Google Maps longitude

  // Order tracking
  trackingNumber    String?
  estimatedDelivery DateTime?
  actualDelivery    DateTime?

  // Notes
  customerNote String? @db.Text
  adminNote    String? @db.Text

  // Cancellation
  cancelReason String?   @db.Text
  cancelledAt  DateTime?
  cancelledBy  String? // User ID who cancelled

  // Shipping
  shipment            Shipment?
  couponUsage         CouponUsage?
  returnRequests      ReturnRequest[]
  pointsHistory       PointsHistory[]
  supportTickets      SupportTicket[]
  affiliateCommission AffiliateCommission?
  stockMovements      StockMovement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  items         OrderItem[]
  payments      Payment[]
  orderHistory  OrderHistory[]
  ProductReview ProductReview[]
  StoreReview   StoreReview[]

  @@index([userId])
  @@index([storeId])
  @@index([status])
  @@index([paymentStatus])
  @@index([createdAt])
  @@map("orders")
}

// Order Items
model OrderItem {
  id      String @id @default(uuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id])

  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  quantity   Int
  unitPrice  Float // Giá tại thời điểm đặt hàng
  totalPrice Float // quantity * unitPrice

  // Product snapshot (in case product is deleted/changed)
  productName  String
  productImage String? @db.Text
  variantName  String?

  // Return items
  returnItems ReturnItem[]

  createdAt DateTime @default(now())

  @@index([orderId])
  @@index([productId])
  @@index([variantId])
  @@map("order_items")
}

// Payment records
model Payment {
  id      String @id @default(uuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  amount Float
  method PaymentMethod
  status PaymentStatus @default(PENDING)

  // Payment gateway info
  transactionId   String? // ID from payment provider
  gatewayResponse String? @db.Text // JSON response from gateway

  paidAt       DateTime?
  refundedAt   DateTime?
  refundAmount Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([status])
  @@index([transactionId])
  @@map("payments")
}

// Order status history
model OrderHistory {
  id      String @id @default(uuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  status    OrderStatus
  note      String?     @db.Text
  createdBy String? // User/Admin ID

  createdAt DateTime @default(now())

  @@index([orderId])
  @@index([createdAt])
  @@map("order_history")
}

// Shopping Cart
model Cart {
  id     String  @id @default(uuid())
  userId String? @unique
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  sessionId String? // For guest users

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  items CartItem[]

  @@index([sessionId])
  @@map("carts")
}

model CartItem {
  id     String @id @default(uuid())
  cartId String
  cart   Cart   @relation(fields: [cartId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  quantity Int @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId, variantId])
  @@index([cartId])
  @@index([productId])
  @@index([variantId])
  @@map("cart_items")
}

// Wishlist
model Wishlist {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
  @@map("wishlists")
}

// Reviews
model ProductReview {
  id        String  @id @default(uuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  orderId String? // Review must be from actual purchase
  order   Order?  @relation(fields: [orderId], references: [id])

  rating  Int // 1-5 stars
  title   String?
  comment String? @db.Text
  images  String? @db.Text // JSON array of image URLs

  isVerified Boolean @default(false) // Verified purchase
  isHelpful  Int     @default(0) // Helpful votes

  // Admin moderation
  isApproved  Boolean   @default(true)
  moderatedBy String? // Admin ID
  moderatedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId, orderId])
  @@index([productId])
  @@index([userId])
  @@index([rating])
  @@index([isApproved])
  @@index([orderId])
  @@map("product_reviews")
}

model StoreReview {
  id      String @id @default(uuid())
  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  orderId String? // Review must be from actual purchase
  order   Order?  @relation(fields: [orderId], references: [id])

  rating  Int // 1-5 stars
  comment String? @db.Text

  // Review aspects
  productQuality       Int? // 1-5
  serviceQuality       Int? // 1-5
  shippingSpeed        Int? // 1-5
  communicationQuality Int? // 1-5

  isVerified Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([storeId, userId, orderId])
  @@index([storeId])
  @@index([userId])
  @@index([rating])
  @@index([orderId])
  @@map("store_reviews")
}

// Store Followers
model StoreFollower {
  id      String @id @default(uuid())
  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([storeId, userId])
  @@index([storeId])
  @@index([userId])
  @@map("store_followers")
}

// Store Promotions/Discounts
enum PromotionType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
  BUY_X_GET_Y
}

enum PromotionStatus {
  DRAFT
  ACTIVE
  PAUSED
  EXPIRED
  CANCELLED
}

model StorePromotion {
  id      String @id @default(uuid())
  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  name        String
  description String?         @db.Text
  type        PromotionType
  status      PromotionStatus @default(DRAFT)

  // Discount details
  discountValue     Float // Percentage or fixed amount
  minOrderAmount    Float? // Minimum order amount
  maxDiscountAmount Float? // Maximum discount amount

  // Usage limits
  usageLimit   Int? // Total usage limit
  usagePerUser Int? // Limit per user
  usedCount    Int  @default(0)

  // Date range
  startDate DateTime
  endDate   DateTime

  // Conditions (JSON)
  conditions String? @db.Text

  // Coupon code (if applicable)
  couponCode String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([status])
  @@index([startDate, endDate])
  @@index([couponCode])
  @@map("store_promotions")
}

// Analytics
model StoreAnalytics {
  id      String @id @default(uuid())
  storeId String
  store   Store  @relation(fields: [storeId], references: [id], onDelete: Cascade)

  date DateTime

  // Traffic metrics
  pageViews      Int @default(0)
  uniqueVisitors Int @default(0)
  newFollowers   Int @default(0)

  // Sales metrics
  orders            Int   @default(0)
  revenue           Float @default(0)
  averageOrderValue Float @default(0)

  // Product metrics
  productViews Int @default(0)
  addToCart    Int @default(0)
  checkouts    Int @default(0)

  createdAt DateTime @default(now())

  @@unique([storeId, date])
  @@index([storeId])
  @@index([date])
  @@map("store_analytics")
}

model ProductAnalytics {
  id        String  @id @default(uuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  date DateTime

  views     Int @default(0)
  addToCart Int @default(0)
  purchases Int @default(0)
  wishlist  Int @default(0)

  createdAt DateTime @default(now())

  @@unique([productId, date])
  @@index([productId])
  @@index([date])
  @@map("product_analytics")
}

// Shipping Management
enum ShippingMethod {
  STANDARD
  EXPRESS
  SAME_DAY
  PICKUP
  DRONE_DELIVERY
}

enum ShippingStatus {
  PENDING
  CONFIRMED
  PICKED_UP
  IN_TRANSIT
  OUT_FOR_DELIVERY
  DELIVERED
  FAILED_DELIVERY
  RETURNED_TO_SENDER
}

model ShippingProvider {
  id          String  @id @default(uuid())
  name        String  @unique
  code        String  @unique // GHN, GHTK, VNPost, etc.
  description String? @db.Text
  logo        String? @db.Text
  website     String? @db.Text

  isActive Boolean @default(true)

  // API credentials (encrypted)
  apiKey    String? @db.Text
  apiSecret String? @db.Text
  apiUrl    String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  shippingRates ShippingRate[]
  shipments     Shipment[]

  @@index([isActive])
  @@map("shipping_providers")
}

model ShippingRate {
  id         String           @id @default(uuid())
  providerId String
  provider   ShippingProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  method ShippingMethod
  name   String // "Giao hàng tiêu chuẩn", "Giao hàng nhanh"

  // Geographic scope
  fromCity String? // Null means nationwide
  toCity   String? // Null means all cities
  fromLat  Float? // Google Maps latitude for from location
  fromLng  Float? // Google Maps longitude for from location
  toLat    Float? // Google Maps latitude for to location
  toLng    Float? // Google Maps longitude for to location

  // Weight/size limits
  minWeight Float? // kg
  maxWeight Float? // kg
  minValue  Float? // Order value
  maxValue  Float? // Order value

  // Pricing
  basePrice             Float // Base shipping fee
  perKgPrice            Float  @default(0) // Additional fee per kg
  freeShippingThreshold Float? // Free shipping over this amount

  // Delivery time
  estimatedDays Int @default(1) // 1-7 days

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([providerId])
  @@index([method])
  @@index([fromCity, toCity])
  @@map("shipping_rates")
}

model Shipment {
  id      String @id @default(uuid())
  orderId String @unique
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  providerId String
  provider   ShippingProvider @relation(fields: [providerId], references: [id])

  method          ShippingMethod
  status          ShippingStatus @default(PENDING)
  trackingNumber  String?
  providerOrderId String? // ID from shipping provider

  // Pickup details
  pickupAddress String    @db.Text
  pickupPhone   String?
  pickupContact String?
  pickupDate    DateTime?
  pickupLat     Float? // Google Maps latitude
  pickupLng     Float? // Google Maps longitude

  // Delivery details
  deliveryAddress   String    @db.Text
  deliveryPhone     String?
  deliveryContact   String?
  estimatedDelivery DateTime?
  actualDelivery    DateTime?
  deliveryLat       Float? // Google Maps latitude
  deliveryLng       Float? // Google Maps longitude

  // Package details
  weight       Float?
  length       Float?
  width        Float?
  height       Float?
  packageValue Float?

  // Fees
  shippingFee  Float
  codFee       Float? // Cash on delivery fee
  insuranceFee Float? @default(0)
  totalFee     Float

  // Notes
  specialInstructions String? @db.Text
  deliveryNote        String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  trackingHistory ShipmentTracking[]

  @@index([orderId])
  @@index([providerId])
  @@index([status])
  @@index([trackingNumber])
  @@map("shipments")
}

model ShipmentTracking {
  id         String   @id @default(uuid())
  shipmentId String
  shipment   Shipment @relation(fields: [shipmentId], references: [id], onDelete: Cascade)

  status      ShippingStatus
  location    String?
  description String?        @db.Text
  timestamp   DateTime
  lat         Float? // Google Maps latitude
  lng         Float? // Google Maps longitude

  createdAt DateTime @default(now())

  @@index([shipmentId])
  @@index([timestamp])
  @@map("shipment_tracking")
}

// Notification System
enum NotificationType {
  ORDER_CONFIRMED
  ORDER_SHIPPED
  ORDER_DELIVERED
  PAYMENT_RECEIVED
  PAYMENT_FAILED
  PRODUCT_REVIEW
  STORE_REVIEW
  PROMOTION_STARTED
  STOCK_LOW
  ACCOUNT_VERIFIED
  SYSTEM_ANNOUNCEMENT
  MARKETING
}

enum NotificationChannel {
  IN_APP
  EMAIL
  SMS
  PUSH
}

model NotificationTemplate {
  id      String              @id @default(uuid())
  type    NotificationType    @unique
  channel NotificationChannel

  title   String
  content String @db.Text

  // Template variables (JSON)
  variables String? @db.Text // {user_name, order_number, etc}

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([type])
  @@index([channel])
  @@map("notification_templates")
}

model Notification {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type    NotificationType
  channel NotificationChannel

  title   String
  content String  @db.Text
  data    String? @db.Text // Additional JSON data

  isRead Boolean   @default(false)
  readAt DateTime?

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([type])
  @@index([isRead])
  @@index([createdAt])
  @@map("notifications")
}

// Global Coupons/Vouchers (different from store promotions)
enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
  CASHBACK
}

enum CouponScope {
  PLATFORM_WIDE // Toàn platform
  CATEGORY // Danh mục cụ thể
  BRAND // Thương hiệu cụ thể
  FIRST_ORDER // Đơn hàng đầu tiên
  NEW_USER // User mới
}

model Coupon {
  id          String  @id @default(uuid())
  code        String  @unique
  name        String
  description String? @db.Text

  type  CouponType
  scope CouponScope @default(PLATFORM_WIDE)

  // Discount details
  discountValue     Float // Percentage or fixed amount
  minOrderAmount    Float? // Minimum order amount
  maxDiscountAmount Float? // Maximum discount amount

  // Usage limits
  totalLimit Int? // Total usage limit
  userLimit  Int? // Limit per user
  usedCount  Int  @default(0)

  // Validity
  startDate DateTime
  endDate   DateTime

  // Scope restrictions (JSON)
  categoryIds  String? @db.Text // JSON array
  brandIds     String? @db.Text // JSON array
  storeIds     String? @db.Text // JSON array
  userGroupIds String? @db.Text // JSON array

  // Status
  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  couponUsages CouponUsage[]

  @@index([code])
  @@index([scope])
  @@index([startDate, endDate])
  @@index([isActive])
  @@map("coupons")
}

model CouponUsage {
  id       String @id @default(uuid())
  couponId String
  coupon   Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  orderId String @unique
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  discountAmount Float // Actual discount applied

  createdAt DateTime @default(now())

  @@unique([couponId, userId, orderId])
  @@index([couponId])
  @@index([userId])
  @@index([orderId])
  @@map("coupon_usages")
}

// Return/Refund Management
enum ReturnReason {
  DEFECTIVE_PRODUCT
  WRONG_ITEM
  NOT_AS_DESCRIBED
  DAMAGED_SHIPPING
  CHANGED_MIND
  SIZE_ISSUE
  OTHER
}

enum ReturnStatus {
  REQUESTED
  APPROVED
  REJECTED
  SHIPPED_BACK
  RECEIVED
  REFUNDED
  CANCELLED
}

model ReturnRequest {
  id      String @id @default(uuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  reason      ReturnReason
  description String       @db.Text
  status      ReturnStatus @default(REQUESTED)

  // Return details
  returnAmount Float // Amount to be refunded
  refundMethod String? // How refund will be processed

  // Admin review
  adminNote  String?   @db.Text
  reviewedBy String? // Admin ID
  reviewedAt DateTime?

  // Return shipping
  returnTrackingNumber String?
  returnShippedAt      DateTime?
  returnReceivedAt     DateTime?

  // Refund details
  refundedAmount  Float?
  refundedAt      DateTime?
  refundReference String? // Payment gateway reference

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  returnItems ReturnItem[]

  @@index([orderId])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("return_requests")
}

model ReturnItem {
  id              String        @id @default(uuid())
  returnRequestId String
  returnRequest   ReturnRequest @relation(fields: [returnRequestId], references: [id], onDelete: Cascade)

  orderItemId String
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])

  quantity  Int // Quantity being returned
  reason    ReturnReason
  condition String? // Condition of returned item

  createdAt DateTime @default(now())

  @@index([returnRequestId])
  @@index([orderItemId])
  @@map("return_items")
}

// Loyalty Program
model LoyaltyProgram {
  id          String  @id @default(uuid())
  name        String
  description String? @db.Text

  // Points configuration
  pointsPerVND        Float @default(1) // Points earned per VND spent
  pointsValue         Float @default(1) // VND value per point
  minimumRedeemPoints Int   @default(100)
  pointsExpiryDays    Int? // Points expire after X days

  // Tier configuration
  enableTiers     Boolean @default(false)
  tierThresholds  String? @db.Text // JSON: {bronze: 0, silver: 1000, gold: 5000}
  tierMultipliers String? @db.Text // JSON: {bronze: 1, silver: 1.5, gold: 2}

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("loyalty_programs")
}

model LoyaltyAccount {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  totalPoints      Int @default(0)
  availablePoints  Int @default(0) // Points available for redemption
  lifetimeEarned   Int @default(0)
  lifetimeRedeemed Int @default(0)

  // Tier information
  currentTier  String? // bronze, silver, gold, etc.
  tierProgress Int     @default(0) // Progress to next tier

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  pointsHistory PointsHistory[]

  @@index([userId])
  @@map("loyalty_accounts")
}

enum PointsTransactionType {
  EARNED_PURCHASE
  EARNED_REVIEW
  EARNED_REFERRAL
  EARNED_SIGNUP
  REDEEMED_DISCOUNT
  REDEEMED_CASHBACK
  EXPIRED
  ADJUSTED
}

model PointsHistory {
  id               String         @id @default(uuid())
  loyaltyAccountId String
  loyaltyAccount   LoyaltyAccount @relation(fields: [loyaltyAccountId], references: [id], onDelete: Cascade)

  type        PointsTransactionType
  points      Int // Positive for earned, negative for redeemed
  description String

  // Related entities
  orderId String?
  order   Order?  @relation(fields: [orderId], references: [id])

  expiresAt DateTime? // When these points expire

  createdAt DateTime @default(now())

  @@index([loyaltyAccountId])
  @@index([orderId])
  @@index([expiresAt])
  @@map("points_history")
}

// FAQ/Help System
enum FAQCategory {
  ORDERING
  PAYMENT
  SHIPPING
  RETURNS
  ACCOUNT
  SELLER
  GENERAL
}

model FAQ {
  id       String      @id @default(uuid())
  category FAQCategory
  question String      @db.Text
  answer   String      @db.Text

  isPublished Boolean @default(true)
  order       Int     @default(0)

  // SEO
  slug            String  @unique
  metaTitle       String?
  metaDescription String? @db.Text

  // Statistics
  viewCount    Int @default(0)
  helpfulCount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@index([isPublished])
  @@index([order])
  @@map("faqs")
}

// Support Tickets
enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_CUSTOMER
  RESOLVED
  CLOSED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model SupportTicket {
  id           String @id @default(uuid())
  ticketNumber String @unique

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  subject     String
  description String         @db.Text
  status      TicketStatus   @default(OPEN)
  priority    TicketPriority @default(MEDIUM)

  // Related entities
  orderId String?
  order   Order?  @relation(fields: [orderId], references: [id])

  // Assignment
  assignedTo String? // Admin/Support agent ID
  assignedAt DateTime?

  // Resolution
  resolvedAt DateTime?
  resolvedBy String? // Admin ID
  resolution String?   @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  messages TicketMessage[]

  @@index([userId])
  @@index([status])
  @@index([priority])
  @@index([assignedTo])
  @@index([orderId])
  @@map("support_tickets")
}

model TicketMessage {
  id       String        @id @default(uuid())
  ticketId String
  ticket   SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  senderId   String // User or Admin ID
  senderType String // "user" or "admin"
  message    String @db.Text

  // Attachments
  attachments String? @db.Text // JSON array of file URLs

  isInternal Boolean @default(false) // Internal admin notes

  createdAt DateTime @default(now())

  @@index([ticketId])
  @@index([createdAt])
  @@map("ticket_messages")
}

// Advanced E-commerce Features

// Live Streaming & Video Commerce
enum StreamStatus {
  SCHEDULED
  LIVE
  ENDED
  CANCELLED
}

model LiveStream {
  id           String       @id @default(uuid())
  title        String
  description  String?      @db.Text
  thumbnailUrl String?      @db.Text
  streamUrl    String?      @db.Text
  status       StreamStatus @default(SCHEDULED)

  // Host information
  hostId String
  host   User   @relation(fields: [hostId], references: [id], onDelete: Cascade)

  // Store relation
  storeId String?
  store   Store?  @relation(fields: [storeId], references: [id], onDelete: SetNull)

  // Scheduling
  scheduledAt DateTime
  startedAt   DateTime?
  endedAt     DateTime?

  // Viewer stats
  maxViewers Int @default(0)
  totalViews Int @default(0)

  // Products featured in stream
  products String? @db.Text // JSON array of product IDs

  // Settings
  isRecorded Boolean @default(true)
  recordUrl  String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  streamViews StreamView[]
  streamChats StreamChat[]

  @@index([hostId])
  @@index([storeId])
  @@index([status])
  @@index([scheduledAt])
  @@map("live_streams")
}

model StreamView {
  id       String     @id @default(uuid())
  streamId String
  stream   LiveStream @relation(fields: [streamId], references: [id], onDelete: Cascade)

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  sessionId String? // For anonymous viewers
  ipAddress String?
  userAgent String? @db.Text

  joinedAt DateTime  @default(now())
  leftAt   DateTime?
  duration Int? // in seconds

  @@index([streamId])
  @@index([userId])
  @@index([sessionId])
  @@map("stream_views")
}

model StreamChat {
  id       String     @id @default(uuid())
  streamId String
  stream   LiveStream @relation(fields: [streamId], references: [id], onDelete: Cascade)

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  message  String  @db.Text
  isHost   Boolean @default(false)
  isPinned Boolean @default(false)

  createdAt DateTime @default(now())

  @@index([streamId])
  @@index([userId])
  @@index([createdAt])
  @@map("stream_chats")
}

// Flash Sales & Time-limited Deals
enum FlashSaleStatus {
  UPCOMING
  ACTIVE
  ENDED
  CANCELLED
}

model FlashSale {
  id          String          @id @default(uuid())
  name        String
  description String?         @db.Text
  bannerImage String?         @db.Text
  status      FlashSaleStatus @default(UPCOMING)

  startTime DateTime
  endTime   DateTime

  // Rules
  maxQuantityPerUser Int?   @default(1)
  minOrderAmount     Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  flashSaleItems FlashSaleItem[]

  @@index([status])
  @@index([startTime, endTime])
  @@map("flash_sales")
}

model FlashSaleItem {
  id          String    @id @default(uuid())
  flashSaleId String
  flashSale   FlashSale @relation(fields: [flashSaleId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  originalPrice   Float
  salePrice       Float
  discountPercent Int

  totalQuantity     Int // Total items for flash sale
  soldQuantity      Int @default(0)
  remainingQuantity Int // Calculated field

  maxPerUser Int @default(1)

  // Priority for display order
  priority Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([flashSaleId, productId])
  @@index([flashSaleId])
  @@index([productId])
  @@map("flash_sale_items")
}

// Affiliate Marketing System
enum AffiliateStatus {
  PENDING
  APPROVED
  SUSPENDED
  REJECTED
}

model Affiliate {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  status AffiliateStatus @default(PENDING)

  // Commission settings
  defaultCommissionRate Float @default(5.0) // Percentage

  // Payment info
  bankAccount  String? @db.Text
  taxCode      String?
  paymentEmail String?

  // Stats
  totalReferrals   Int   @default(0)
  totalCommission  Float @default(0)
  unpaidCommission Float @default(0)

  // Application info
  applicationNote String?   @db.Text
  rejectionReason String?   @db.Text
  approvedAt      DateTime?
  approvedBy      String? // Admin ID

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  affiliateLinks AffiliateLink[]
  commissions    AffiliateCommission[]
  payouts        AffiliatePayout[]

  @@index([userId])
  @@index([status])
  @@map("affiliates")
}

model AffiliateLink {
  id          String    @id @default(uuid())
  affiliateId String
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)

  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)

  storeId String?
  store   Store?  @relation(fields: [storeId], references: [id], onDelete: SetNull)

  code String @unique // Unique affiliate code

  // Custom commission rate (overrides default)
  commissionRate Float?

  // Stats
  clicks      Int   @default(0)
  conversions Int   @default(0)
  revenue     Float @default(0)

  isActive Boolean @default(true)

  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  AffiliateCommission AffiliateCommission[]

  @@index([affiliateId])
  @@index([productId])
  @@index([storeId])
  @@index([code])
  @@map("affiliate_links")
}

model AffiliateCommission {
  id          String    @id @default(uuid())
  affiliateId String
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)

  orderId String @unique
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  linkId String?
  link   AffiliateLink? @relation(fields: [linkId], references: [id], onDelete: SetNull)

  orderAmount      Float
  commissionRate   Float
  commissionAmount Float

  status String    @default("pending") // pending, approved, paid
  paidAt DateTime?

  createdAt DateTime @default(now())

  @@index([affiliateId])
  @@index([orderId])
  @@index([status])
  @@index([linkId])
  @@map("affiliate_commissions")
}

model AffiliatePayout {
  id          String    @id @default(uuid())
  affiliateId String
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id], onDelete: Cascade)

  amount    Float
  method    String // bank_transfer, paypal, etc.
  reference String? // Transaction reference
  note      String? @db.Text

  status      String    @default("pending") // pending, processing, completed, failed
  processedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([affiliateId])
  @@index([status])
  @@map("affiliate_payouts")
}

// Advanced Inventory Management
model InventoryLocation {
  id      String @id @default(uuid())
  name    String // "Kho Hà Nội", "Kho HCM"
  code    String @unique
  address String @db.Text
  lat     Float?
  lng     Float?

  storeId String?
  store   Store?  @relation(fields: [storeId], references: [id], onDelete: SetNull)

  isActive  Boolean @default(true)
  isDefault Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  inventoryItems InventoryItem[]
  stockMovements StockMovement[] @relation("LocationStockMovements")
  transfersTo    StockMovement[] @relation("StockTransfer")
  StockMovement  StockMovement[]

  @@index([storeId])
  @@index([isActive])
  @@map("inventory_locations")
}

model InventoryItem {
  id         String            @id @default(uuid())
  locationId String
  location   InventoryLocation @relation(fields: [locationId], references: [id], onDelete: Cascade)

  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)

  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  quantity     Int @default(0)
  reservedQty  Int @default(0) // Reserved for pending orders
  availableQty Int @default(0) // quantity - reservedQty

  // Thresholds
  minStockLevel Int  @default(0)
  maxStockLevel Int?
  reorderPoint  Int  @default(5)

  // Cost tracking
  avgCostPrice  Float?
  lastCostPrice Float?

  updatedAt DateTime @updatedAt

  @@unique([locationId, productId, variantId])
  @@index([locationId])
  @@index([productId])
  @@index([variantId])
  @@map("inventory_items")
}

enum StockMovementType {
  IN // Stock received
  OUT // Stock sold
  TRANSFER // Between locations
  ADJUSTMENT // Manual adjustment
  RETURN // Customer return
  DAMAGED // Damaged goods
  EXPIRED // Expired products
}

model StockMovement {
  id         String            @id @default(uuid())
  locationId String
  location   InventoryLocation @relation("LocationStockMovements", fields: [locationId], references: [id], onDelete: Cascade)

  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)

  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)

  type     StockMovementType
  quantity Int // Positive for IN, negative for OUT

  // Related entities
  orderId String?
  order   Order?  @relation(fields: [orderId], references: [id], onDelete: SetNull)

  transferToLocationId String?
  transferToLocation   InventoryLocation? @relation("StockTransfer", fields: [transferToLocationId], references: [id], onDelete: SetNull)

  // Cost information
  unitCost  Float?
  totalCost Float?

  reason          String? @db.Text
  referenceNumber String? // PO number, invoice number, etc.

  createdBy           String? // User ID
  createdAt           DateTime           @default(now())
  InventoryLocation   InventoryLocation? @relation(fields: [inventoryLocationId], references: [id])
  inventoryLocationId String?

  @@index([locationId])
  @@index([productId])
  @@index([variantId])
  @@index([type])
  @@index([createdAt])
  @@index([inventoryLocationId])
  @@index([transferToLocationId])
  @@index([orderId])
  @@map("stock_movements")
}

// Multi-language Support
model Translation {
  id           String @id @default(uuid())
  entityType   String // "product", "category", "store", etc.
  entityId     String
  fieldName    String // "name", "description", etc.
  languageCode String // "vi", "en", "zh", etc.
  value        String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([entityType, entityId, fieldName, languageCode])
  @@index([entityType, entityId])
  @@index([languageCode])
  @@map("translations")
}

// SEO & Content Management
model SEOTemplate {
  id       String @id @default(uuid())
  pageType String // "product", "category", "store", "homepage"
  template String @db.Text // Template with variables like {product_name}

  titleTemplate       String? @db.Text
  descriptionTemplate String? @db.Text
  keywordsTemplate    String? @db.Text

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([pageType])
  @@map("seo_templates")
}

// Advanced Search & Filters
model SearchQuery {
  id     String  @id @default(uuid())
  query  String
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  sessionId String? // For anonymous users
  ipAddress String?

  // Results
  resultCount      Int     @default(0)
  clickedProductId String?

  // Filters applied
  filters String? @db.Text // JSON

  createdAt DateTime @default(now())

  @@index([query])
  @@index([userId])
  @@index([createdAt])
  @@map("search_queries")
}

model PopularSearch {
  id          String @id @default(uuid())
  query       String @unique
  searchCount Int    @default(1)
  resultCount Int    @default(0)

  lastSearched DateTime @default(now())

  @@index([searchCount])
  @@index([lastSearched])
  @@map("popular_searches")
}

// Product Recommendations
enum RecommendationType {
  VIEWED_TOGETHER // "Khách hàng cũng xem"
  BOUGHT_TOGETHER // "Mua cùng nhau"
  SIMILAR_PRODUCTS // "Sản phẩm tương tự"
  PERSONALIZED // "Đề xuất cho bạn"
  TRENDING // "Xu hướng"
  RECENTLY_VIEWED // "Đã xem gần đây"
}

model ProductRecommendation {
  id   String             @id @default(uuid())
  type RecommendationType

  sourceProductId String?
  sourceProduct   Product? @relation("SourceProduct", fields: [sourceProductId], references: [id], onDelete: Cascade)

  targetProductId String
  targetProduct   Product @relation("TargetProduct", fields: [targetProductId], references: [id], onDelete: Cascade)

  score Float @default(0) // Recommendation strength

  // For personalized recommendations
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([type, sourceProductId, targetProductId, userId])
  @@index([type])
  @@index([sourceProductId])
  @@index([targetProductId])
  @@index([userId])
  @@index([score])
  @@map("product_recommendations")
}

// Advanced Analytics
model UserBehavior {
  id     String  @id @default(uuid())
  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  sessionId String? // For anonymous users
  action    String // view_product, add_to_cart, purchase, etc.

  // Context
  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  storeId String?
  store   Store?  @relation(fields: [storeId], references: [id], onDelete: SetNull)

  // Additional data
  data String? @db.Text // JSON

  // Device info
  deviceType String? // mobile, tablet, desktop
  browser    String?
  os         String?

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([sessionId])
  @@index([action])
  @@index([productId])
  @@index([createdAt])
  @@index([categoryId])
  @@index([storeId])
  @@map("user_behaviors")
}

// Social Features
model ProductShare {
  id        String  @id @default(uuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  platform String // facebook, twitter, telegram, etc.
  sharedAt DateTime @default(now())

  @@index([productId])
  @@index([userId])
  @@index([platform])
  @@map("product_shares")
}

model UserFollow {
  id         String @id @default(uuid())
  followerId String
  follower   User   @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)

  followingId String
  following   User   @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("user_follows")
}

// Subscription & Premium Features
enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  SUSPENDED
}

model Subscription {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  planId String
  plan   SubscriptionPlan @relation(fields: [planId], references: [id])

  status SubscriptionStatus @default(ACTIVE)

  startDate DateTime
  endDate   DateTime

  // Payment
  amount   Float
  currency String @default("VND")

  // Auto-renewal
  autoRenew Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([planId])
  @@index([status])
  @@index([endDate])
  @@map("subscriptions")
}

model SubscriptionPlan {
  id          String  @id @default(uuid())
  name        String
  description String? @db.Text

  price    Float
  currency String @default("VND")

  // Duration
  durationDays Int // 30 for monthly, 365 for yearly

  // Features (JSON)
  features String @db.Text

  isActive Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  subscriptions Subscription[]

  @@index([isActive])
  @@map("subscription_plans")
}

model ProductAuditLog {
  id        String      @id @default(uuid())
  productId String
  userId    String
  action    AuditAction
  before    Json?
  after     Json?
  createdAt DateTime    @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([userId])
  @@map("product_audit_log")
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
}
